import java.util.regex.*;

aspect NameAnalysis {
	
	
	  private static Declaration CompilationUnit.subtreeLookup(ASTNode decl, String label){
		  Declaration match = null; 
		  if(decl instanceof CompilationUnit){ 
			  for(Declaration d : ((CompilationUnit)decl).getBodyList()){
				  match = d.lookup(label);
				  if(match != null)
					  return match;
			  }
		  }
		  else if(decl instanceof ClassDeclaration){
			  for(Declaration d : ((ClassDeclaration)decl).getBodyList()){
				  match = d.lookup(label);
				  if(match != null)
					  return match;
			  }
		  }
		  return null;
	  }
			
	  public static Declaration CompilationUnit.doLookup(ASTNode decl, String label){
		  String[] parts = new String[2];
		  int dotindex = label.indexOf('.');
		  if(dotindex == -1){
				parts[0] = label;
				parts[1] = "";
		  }
		  else{
				parts[0] = label.substring(0, dotindex);
				parts[1] = label.substring(dotindex+1);
		  }
		  
		  Declaration localMatch = null;
		  if(decl instanceof CompilationUnit){
			  localMatch = ((CompilationUnit)decl).localLookup(parts[0]);		 		  
			  if(parts[1] == "")
				  return localMatch;
			  if(localMatch != null){
				if(parts[0].equals("-1")){
					Declaration match = ((CompilationUnit)decl).lookup(parts[1]);
					if(match != null)
						return match;
					return CompilationUnit.subtreeLookup(decl, label);
				}
				if(parts[0].equals("0")){
					return ((CompilationUnit)decl).lookup(parts[1]);
				}
				if(parts[0].matches("[1-9][0-9]*")){
					Declaration match = ((CompilationUnit)decl).lookup(parts[1]);
					if(match != null)
						return match;
					int num = Integer.parseInt(parts[0]) - 1;
					return CompilationUnit.subtreeLookup(decl, "" + num + "." + parts[1]);
				}
				return localMatch.lookup(parts[1]);
			  }
			  return null;
		  }
		  else if(decl instanceof ClassDeclaration){
			  localMatch = ((ClassDeclaration)decl).localLookup(parts[0]);		 		  
			  if(parts[1] == "")
				  return localMatch;
			  if(localMatch != null){
				if(parts[0].equals("-1")){
					Declaration match = ((ClassDeclaration)decl).lookup(parts[1]);
					if(match != null)
						return match;
					return CompilationUnit.subtreeLookup(decl, label);
				}
				if(parts[0].equals("0")){
					return ((ClassDeclaration)decl).lookup(parts[1]);
				}
				if(parts[0].matches("[1-9][0-9]*")){
					Declaration match = ((ClassDeclaration)decl).lookup(parts[1]);
					if(match != null)
						return match;
					int num = Integer.parseInt(parts[0]) - 1;
					return CompilationUnit.subtreeLookup(decl, "" + num + "." + parts[1]);
				}
				return localMatch.lookup(parts[1]);
			  }
			  return null;
		}
		return null;
	  }
	 
	syn Declaration CompilationUnit.lookup(String label){
		return doLookup(this, label);
	}
	
	syn Declaration ClassDeclaration.lookup(String label){
		return CompilationUnit.doLookup(this, label);
	}
	
	syn Declaration Declaration.lookup(String label){
		return null;
	}
	
	syn Declaration ASTNode.localLookup(String label){
		if(this instanceof CompilationUnit)
			   return ((CompilationUnit)this).localLookup(label);
		else if(this instanceof ClassDeclaration)
			   return ((ClassDeclaration)this).localLookup(label);
		else if(this instanceof MethodDeclaration)
			return ((MethodDeclaration)this).localLookup(label);
		else return null;
   }
	
	syn Declaration CompilationUnit.localLookup(String label){
		   for (Declaration d : getBodyList()){
			   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
				   return d;
		   }
		   return null;
	   }
	   
	   syn Declaration ClassDeclaration.localLookup(String label){
		   for(Declaration d : getBodyList()){
			   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
				   return d;
		   }
		   return null;
	   }
	   
	   syn Declaration MethodDeclaration.localLookup(String label){
		   for(Declaration d : getParametersList()){
			   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
				   return d;
		   }
		   for(Statement d : getBodyList()){
			   if(d instanceof Declaration)
				   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(((Declaration)d).getName()))
					   return (Declaration)d;
		   }
		   return null;
	   }
	   
	   syn Declaration MethodDeclaration.localLookup(String label, int bound){
		   for(Declaration d : getParametersList()){
			   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
				   return d;
		   }
		   for(int i = 0; i < bound; i++){
			   Statement d = getBody(i);
			   if(d instanceof Declaration)
				   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(((Declaration)d).getName()))
					   return (Declaration)d;
		   }
		   return null;
	   }

		
   //reference lookup
	syn Declaration CompilationUnit.lookupRef(String refName){
		return this.lookup(refName);
	}
	
	inh Declaration ClassDeclaration.lookupRef(String refName);
	eq ClassDeclaration.getBody(int i).lookupRef(String refName){
		Declaration match = getBody(i).lookup(refName);
		if(match != null)
			return match;
		return this.lookupRef(refName);
	}
	eq CompilationUnit.getBody(int i).lookupRef(String refName){
		Declaration match = getBody(i).lookup(refName);
		if(match != null)
			return match;
		return this.lookupRef(refName);
	}
	
	inh Declaration Reference.lookupRef(String refName);
	eq MethodDeclaration.getBody(int i).lookupRef(String refName){
		int refIndex = this.getBodyList().getIndexOfChild(getBody(i));
		int dotindex = refName.indexOf('.');
		Declaration match = null;
		if(dotindex == -1)  //null? cdr refName
			match = this.localLookup(refName, refIndex);
		if(match != null)
			return match;
		return ((ClassDeclaration)getParent().getParent()).lookupRef(refName);
	}
  
}
