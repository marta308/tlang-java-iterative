import java.util.regex.*;

aspect NameAnalysis {
	
	  
	  inh String Declaration.qname();
	  eq CompilationUnit.getBody(int i).qname() = getBody(i).getName();
	  eq ClassDeclaration.getBody(int i).qname(){
		  return qname() + "." + getBody(i).getName();
	  }
	  eq MethodDeclaration.getParameters(int i).qname(){
		  return qname() + "." + getParameters(i).getName();
	  }
	  eq MethodDeclaration.getBody(int i).qname(){ 
		  return qname() + "." + getBody(i).getName();
	  }
	
	  private static Declaration CompilationUnit.subtreeLookup(ASTNode decl, String label){
		  List<Declaration> body = null;
		  if(decl instanceof CompilationUnit)
			  body = ((CompilationUnit)decl).getBodyList();
		  else if(decl instanceof ClassDeclaration)
			  body = ((ClassDeclaration)decl).getBodyList(); 
		  Declaration match = null; 
		  for(Declaration d : body){
			  match = d.lookup(label);
			  if(match != null)
				  return match;
		  }
		  return null;
	  }
			
	  public static Declaration CompilationUnit.doLookup(ASTNode decl, String label){
		  String[] parts = new String[2];
		  int dotindex = label.indexOf('.');
		  if(dotindex == -1){
				parts[0] = label;
				parts[1] = "";
		  }
		  else{
				parts[0] = label.substring(0, dotindex);
				parts[1] = label.substring(dotindex+1);
		  }
		  
		  Declaration localMatch = null;
		  if(decl instanceof CompilationUnit){
			  localMatch = ((CompilationUnit)decl).localLookup(parts[0]);		 		  
			  if(parts[1] == "")
				  localMatch;
			  if(localMatch != null){
				if(parts[0].equals("-1")){
					Declaration match = ((CompilationUnit)decl).lookup(parts[1]);
					if(match != null)
						return match;
					return CompilationUnit.subtreeLookup(decl, label);
				}
				if(parts[0].equals("0")){
					return ((CompilationUnit)decl).lookup(parts[1]);
				}
				if(parts[0].matches("[1-9][0-9]*")){
					Declaration match = ((CompilationUnit)decl).lookup(parts[1]);
					if(match != null)
						return match;
					int num = Integer.parseInt(parts[0]) - 1;
					return CompilationUnit.subtreeLookup(decl, "" + num + "." + parts[1]);
				}
				return localMatch.lookup(parts[1]);
			  }
			  return null;
		  }
		  else if(decl instanceof ClassDeclaration){
			  localMatch = ((ClassDeclaration)decl).localLookup(parts[0]);		 		  
			  if(parts[1] == "")
				  localMatch;
			  if(localMatch != null){
				if(parts[0].equals("-1")){
					Declaration match = ((ClassDeclaration)decl).lookup(parts[1]);
					if(match != null)
						return match;
					return CompilationUnit.subtreeLookup(decl, label);
				}
				if(parts[0].equals("0")){
					return ((ClassDeclaration)decl).lookup(parts[1]);
				}
				if(parts[0].matches("[1-9][0-9]*")){
					Declaration match = ((ClassDeclaration)decl).lookup(parts[1]);
					if(match != null)
						return match;
					int num = Integer.parseInt(parts[0]) - 1;
					return CompilationUnit.subtreeLookup(decl, "" + num + "." + parts[1]);
				}
				return localMatch.lookup(parts[1]);
		  }
		  return null;
		}
	  }
	 
	syn Declaration CompilationUnit.lookup(String label){
		return doLookup(this, label);
	}
	
	syn Declaration ClassDeclaration.lookup(String label){
		return doLookup(this, label);
	}
	
	syn Declaration Declaration.lookup(String label){
		return null;
	}
	
	syn Declaration CompilationUnit.localLookup(String label){
		   for (Declaration d : getBodyList()){
			   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
				   return d;
		   }
		   return null;
	   }
	   
	   syn Declaration ClassDeclaration.localLookup(String label){
		   for(Declaration d : getBodyList()){
			   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
				   return d;
		   }
		   return null;
	   }
	   
	   syn Declaration MethodDeclaration.localLookup(String label, Integer.. boundArg){
		   for(Declaration d : getParametersList()){
			   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
				   return d;
		   }
		   int bound = (boundArg.length == 0)? getBody().getNumChildrenNoTransform() : boundArg[0];
		   for(int i = 0; i < bound; i++){
			   Statement d = getBody(i);
			   if(d instanceof Declaration)
				   if(label.matches("-?[0-9]+") || label.equals("*") || label.equals(d.getName()))
					   return (Declaration)d;
		   }
		   return null;
	   }

	
	
   //reference lookup
	syn boolean Reference.lookupRef(String refName){
		MethodDeclaration method = (MethodDeclaration)getParent().getParent();
		int refIndex = method.getIndexOfChild(this);
		int dotindex = refName.indexOf('.');
		if(dotindex == -1){	//null? cdr refName
			for(Declaration d : method.getParametersList()){
				   if(refName.equals(d.getName()))
					   return true;
			   }
			   for(int i = 0; i < refIndex; i++){
				   Statement d = method.getMethodBody(i);
				   if(d instanceof Declaration && refName.equals(d.getName()))
					   return true;
			   }
		}
		return method.lookupRef(refName);
	}
	
	syn boolean MethodDeclaration.lookupRef(String refName){
		ClassDeclaration parent = (ClassDeclaration)getParent().getParent();
		if(parent.lookup(parent.getName()+"."+refName) != null)
			return true;
		return parent.lookupRef(refName);
	}
	
	inh Declaration ClassDeclaration.lookupRef(String refName);
	eq ClassDeclaration.getClassBody(int i).lookupRef(String refName){
		//ClassDeclaration parent = (ClassDeclaration)getParent().getParent();
		if(this.lookup(refName) != null)
			return true;
		return this.lookupRef(refName);
	}
	eq CompilationUnit.getClassDeclaration(int i).lookupRef(String refName){
		//CompilationUnit parent = (CompilationUnit)getParent().getParent();
		if(this.lookup(refName) != null)
			return true;
		return this.lookupRef(refName);
	}
	syn boolean CompilationUnit.lookupRef(String refName){
		return (((Root)getParent().getParent()).lookup(refName) != null)? true : false;
	}
	

   
   	
  
}
