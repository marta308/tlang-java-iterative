%header {: // Generated from spec/TLangParser.parser
// this code is inlined before the generated parser
 package syntax;
 import AST.*; :};
%embed {: // Generated from spec/TLangParser.parser
// this code is inlined in the generated parser class :};
%terminals CLASS;
%terminals IDENTIFIER;
%terminals LBRACE;
%terminals RBRACE;
%terminals LPAREN;
%terminals RPAREN;
%terminals SEMI;
%terminals LSQUARE;
%terminals RSQUARE;
%terminals USE;
%typeof declaration_hook = "DeclarationHook";
%typeof statement = "Statement";
%typeof class_declaration = "ClassDeclaration";
%typeof declaration = "Declaration";
%typeof field_declaration = "FieldDeclaration";
%typeof declaration_list = "List";
%typeof statement_list = "List";
%typeof field_list = "List";
%typeof method_declaration = "MethodDeclaration";
%typeof reference = "Reference";
%typeof goal = "compilationunit";
%typeof class_list = "List";
%goal goal;
goal =
    class_list.class_list {: ASTNode _node_ = new CompilationUnit(class_list);
        _node_.setStart(Symbol.getLine(_symbol_class_list.getStart()), (short) Symbol.getColumn(_symbol_class_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_class_list.getEnd()), (short) Symbol.getColumn(_symbol_class_list.getEnd()));
        return new Symbol(_node_); :}
  ;
statement_list =
    statement.statement {: ASTNode _node_ = new List().add(statement);
        _node_.setStart(Symbol.getLine(_symbol_statement.getStart()), (short) Symbol.getColumn(_symbol_statement.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_statement.getEnd()), (short) Symbol.getColumn(_symbol_statement.getEnd()));
        return new Symbol(_node_); :}

  | statement_list.statement_list statement.statement {: ASTNode _node_ = statement_list.add(statement);
        _node_.setStart(Symbol.getLine(_symbol_statement_list.getStart()), (short) Symbol.getColumn(_symbol_statement_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_statement.getEnd()), (short) Symbol.getColumn(_symbol_statement.getEnd()));
        return new Symbol(_node_); :}

  | {: return new Symbol(new List()); :}
  ;
declaration_list =
    declaration.declaration {: ASTNode _node_ = new List().add(declaration);
        _node_.setStart(Symbol.getLine(_symbol_declaration.getStart()), (short) Symbol.getColumn(_symbol_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration.getEnd()), (short) Symbol.getColumn(_symbol_declaration.getEnd()));
        return new Symbol(_node_); :}

  | declaration_list.declaration_list declaration.declaration {: ASTNode _node_ = declaration_list.add(declaration);
        _node_.setStart(Symbol.getLine(_symbol_declaration_list.getStart()), (short) Symbol.getColumn(_symbol_declaration_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration.getEnd()), (short) Symbol.getColumn(_symbol_declaration.getEnd()));
        return new Symbol(_node_); :}

  | {: return new Symbol(new List()); :}
  ;
field_list =
    field_declaration.field_declaration {: ASTNode _node_ = new List().add(field_declaration);
        _node_.setStart(Symbol.getLine(_symbol_field_declaration.getStart()), (short) Symbol.getColumn(_symbol_field_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_field_declaration.getEnd()), (short) Symbol.getColumn(_symbol_field_declaration.getEnd()));
        return new Symbol(_node_); :}

  | field_list.field_list field_declaration.field_declaration {: ASTNode _node_ = field_list.add(field_declaration);
        _node_.setStart(Symbol.getLine(_symbol_field_list.getStart()), (short) Symbol.getColumn(_symbol_field_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_field_declaration.getEnd()), (short) Symbol.getColumn(_symbol_field_declaration.getEnd()));
        return new Symbol(_node_); :}

  | {: return new Symbol(new List()); :}
  ;
class_list =
    class_declaration.class_declaration {: ASTNode _node_ = new List().add(class_declaration);
        _node_.setStart(Symbol.getLine(_symbol_class_declaration.getStart()), (short) Symbol.getColumn(_symbol_class_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_class_declaration.getEnd()), (short) Symbol.getColumn(_symbol_class_declaration.getEnd()));
        return new Symbol(_node_); :}

  | class_list.class_list class_declaration.class_declaration {: ASTNode _node_ = class_list.add(class_declaration);
        _node_.setStart(Symbol.getLine(_symbol_class_list.getStart()), (short) Symbol.getColumn(_symbol_class_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_class_declaration.getEnd()), (short) Symbol.getColumn(_symbol_class_declaration.getEnd()));
        return new Symbol(_node_); :}

  | {: return new Symbol(new List()); :}
  ;
statement =
    declaration.declaration {: ASTNode _node_ = declaration;
        _node_.setStart(Symbol.getLine(_symbol_declaration.getStart()), (short) Symbol.getColumn(_symbol_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration.getEnd()), (short) Symbol.getColumn(_symbol_declaration.getEnd()));
        return new Symbol(_node_); :}

  | reference.reference {: ASTNode _node_ = reference;
        _node_.setStart(Symbol.getLine(_symbol_reference.getStart()), (short) Symbol.getColumn(_symbol_reference.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_reference.getEnd()), (short) Symbol.getColumn(_symbol_reference.getEnd()));
        return new Symbol(_node_); :}
  ;
declaration =
    class_declaration.class_declaration {: ASTNode _node_ = class_declaration;
        _node_.setStart(Symbol.getLine(_symbol_class_declaration.getStart()), (short) Symbol.getColumn(_symbol_class_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_class_declaration.getEnd()), (short) Symbol.getColumn(_symbol_class_declaration.getEnd()));
        return new Symbol(_node_); :}

  | method_declaration.method_declaration {: ASTNode _node_ = method_declaration;
        _node_.setStart(Symbol.getLine(_symbol_method_declaration.getStart()), (short) Symbol.getColumn(_symbol_method_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_method_declaration.getEnd()), (short) Symbol.getColumn(_symbol_method_declaration.getEnd()));
        return new Symbol(_node_); :}

  | field_declaration.field_declaration {: ASTNode _node_ = field_declaration;
        _node_.setStart(Symbol.getLine(_symbol_field_declaration.getStart()), (short) Symbol.getColumn(_symbol_field_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_field_declaration.getEnd()), (short) Symbol.getColumn(_symbol_field_declaration.getEnd()));
        return new Symbol(_node_); :}

  | declaration_hook.declaration_hook {: ASTNode _node_ = declaration_hook;
        _node_.setStart(Symbol.getLine(_symbol_declaration_hook.getStart()), (short) Symbol.getColumn(_symbol_declaration_hook.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration_hook.getEnd()), (short) Symbol.getColumn(_symbol_declaration_hook.getEnd()));
        return new Symbol(_node_); :}
  ;
class_declaration =
    CLASS.CLASS IDENTIFIER.IDENTIFIER LBRACE.LBRACE declaration_list.declaration_list RBRACE.RBRACE {: ASTNode _node_ = new ClassDeclaration(((String)IDENTIFIER.value), declaration_list);
        _node_.setStart(Symbol.getLine(CLASS.getStart()), (short) Symbol.getColumn(CLASS.getStart()));
        _node_.setEnd(Symbol.getLine(RBRACE.getEnd()), (short) Symbol.getColumn(RBRACE.getEnd()));
        return new Symbol(_node_); :}
  ;
method_declaration =
    IDENTIFIER.IDENTIFIER LPAREN.LPAREN field_list.params RPAREN.RPAREN LBRACE.LBRACE statement_list.locals RBRACE.RBRACE {: ASTNode _node_ = new MethodDeclaration(((String)IDENTIFIER.value), params, locals);
        _node_.setStart(Symbol.getLine(IDENTIFIER.getStart()), (short) Symbol.getColumn(IDENTIFIER.getStart()));
        _node_.setEnd(Symbol.getLine(RBRACE.getEnd()), (short) Symbol.getColumn(RBRACE.getEnd()));
        return new Symbol(_node_); :}
  ;
field_declaration =
    IDENTIFIER.IDENTIFIER SEMI.SEMI {: ASTNode _node_ = new FieldDeclaration(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(IDENTIFIER.getStart()), (short) Symbol.getColumn(IDENTIFIER.getStart()));
        _node_.setEnd(Symbol.getLine(SEMI.getEnd()), (short) Symbol.getColumn(SEMI.getEnd()));
        return new Symbol(_node_); :}
  ;
declaration_hook =
    LSQUARE.LSQUARE LSQUARE.LSQUARE_ IDENTIFIER.IDENTIFIER RSQUARE.RSQUARE RSQUARE.RSQUARE_ {: ASTNode _node_ = new DeclarationHook(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(LSQUARE.getStart()), (short) Symbol.getColumn(LSQUARE.getStart()));
        _node_.setEnd(Symbol.getLine(RSQUARE_.getEnd()), (short) Symbol.getColumn(RSQUARE_.getEnd()));
        return new Symbol(_node_); :}
  ;
reference =
    USE.USE IDENTIFIER.IDENTIFIER {: ASTNode _node_ = new Reference(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(USE.getStart()), (short) Symbol.getColumn(USE.getStart()));
        _node_.setEnd(Symbol.getLine(IDENTIFIER.getEnd()), (short) Symbol.getColumn(IDENTIFIER.getEnd()));
        return new Symbol(_node_); :}
  ;












