%header {: // Generated from spec/TLangParser.parser
// this code is inlined before the generated parser
 package syntax;
 import AST.*; :};
%embed {: // Generated from spec/TLangParser.parser
// this code is inlined in the generated parser class :};
%terminals PUBLIC;
%terminals CLASS;
%terminals IDENTIFIER;
%terminals LBRACE;
%terminals RBRACE;
%terminals STATIC;
%terminals VOID;
%terminals LPAREN;
%terminals RPAREN;
%terminals COMA;
%terminals SEMI;
%terminals INT;
%terminals LSQUARE;
%terminals RSQUARE;
%terminals EQUAL;
%typeof inner_class_declaration = "ClassDeclaration";
%typeof declaration = "Declaration";
%typeof field_or_param = "FieldDeclaration";
%typeof goal = "outer_class_decl";
%typeof reference = "Reference";
%typeof param_list = "List";
%typeof declaration_hook = "DeclarationHook";
%typeof assignment = "VariableAssignment";
%typeof field_or_assignment = "ASTNode";
%typeof declaration_list = "List";
%typeof field_declaration = "ASTNode";
%typeof method_declaration = "MethodDeclaration";
%typeof field_or_assignment_list = "List";
%goal goal;
goal =
    PUBLIC.PUBLIC CLASS.CLASS IDENTIFIER.IDENTIFIER LBRACE.LBRACE declaration_list.declaration_list RBRACE.RBRACE {: ASTNode _node_ = new ClassDeclaration(((String)IDENTIFIER.value), declaration_list);
        _node_.setStart(Symbol.getLine(PUBLIC.getStart()), (short) Symbol.getColumn(PUBLIC.getStart()));
        _node_.setEnd(Symbol.getLine(RBRACE.getEnd()), (short) Symbol.getColumn(RBRACE.getEnd()));
        return new Symbol(_node_); :}
  ;
declaration_list =
    declaration.declaration {: ASTNode _node_ = new List().add(declaration);
        _node_.setStart(Symbol.getLine(_symbol_declaration.getStart()), (short) Symbol.getColumn(_symbol_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration.getEnd()), (short) Symbol.getColumn(_symbol_declaration.getEnd()));
        return new Symbol(_node_); :}

  | declaration_list.declaration_list declaration.declaration {: ASTNode _node_ = declaration_list.add(declaration);
        _node_.setStart(Symbol.getLine(_symbol_declaration_list.getStart()), (short) Symbol.getColumn(_symbol_declaration_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration.getEnd()), (short) Symbol.getColumn(_symbol_declaration.getEnd()));
        return new Symbol(_node_); :}

  | {: return new Symbol(new List()); :}
  ;
declaration =
    inner_class_declaration.inner_class_declaration {: ASTNode _node_ = inner_class_declaration;
        _node_.setStart(Symbol.getLine(_symbol_inner_class_declaration.getStart()), (short) Symbol.getColumn(_symbol_inner_class_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_inner_class_declaration.getEnd()), (short) Symbol.getColumn(_symbol_inner_class_declaration.getEnd()));
        return new Symbol(_node_); :}

  | method_declaration.method_declaration {: ASTNode _node_ = method_declaration;
        _node_.setStart(Symbol.getLine(_symbol_method_declaration.getStart()), (short) Symbol.getColumn(_symbol_method_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_method_declaration.getEnd()), (short) Symbol.getColumn(_symbol_method_declaration.getEnd()));
        return new Symbol(_node_); :}

  | field_declaration.field_declaration {: ASTNode _node_ = field_declaration;
        _node_.setStart(Symbol.getLine(_symbol_field_declaration.getStart()), (short) Symbol.getColumn(_symbol_field_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_field_declaration.getEnd()), (short) Symbol.getColumn(_symbol_field_declaration.getEnd()));
        return new Symbol(_node_); :}

  | declaration_hook.declaration_hook {: ASTNode _node_ = declaration_hook;
        _node_.setStart(Symbol.getLine(_symbol_declaration_hook.getStart()), (short) Symbol.getColumn(_symbol_declaration_hook.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration_hook.getEnd()), (short) Symbol.getColumn(_symbol_declaration_hook.getEnd()));
        return new Symbol(_node_); :}
  ;
inner_class_declaration =
    PUBLIC.PUBLIC STATIC.STATIC CLASS.CLASS IDENTIFIER.IDENTIFIER LBRACE.LBRACE declaration_list.declaration_list RBRACE.RBRACE {: ASTNode _node_ = new ClassDeclaration(((String)IDENTIFIER.value), declaration_list);
        _node_.setStart(Symbol.getLine(PUBLIC.getStart()), (short) Symbol.getColumn(PUBLIC.getStart()));
        _node_.setEnd(Symbol.getLine(RBRACE.getEnd()), (short) Symbol.getColumn(RBRACE.getEnd()));
        return new Symbol(_node_); :}
  ;
method_declaration =
    PUBLIC.PUBLIC STATIC.STATIC VOID.VOID IDENTIFIER.IDENTIFIER LPAREN.LPAREN param_list.params RPAREN.RPAREN LBRACE.LBRACE field_or_assignment_list.locals RBRACE.RBRACE {: ASTNode _node_ = new MethodDeclaration(((String)IDENTIFIER.value), params, locals);
        _node_.setStart(Symbol.getLine(PUBLIC.getStart()), (short) Symbol.getColumn(PUBLIC.getStart()));
        _node_.setEnd(Symbol.getLine(RBRACE.getEnd()), (short) Symbol.getColumn(RBRACE.getEnd()));
        return new Symbol(_node_); :}
  ;
param_list =
    field_or_param.field_or_param {: ASTNode _node_ = new List().add(field_or_param);
        _node_.setStart(Symbol.getLine(_symbol_field_or_param.getStart()), (short) Symbol.getColumn(_symbol_field_or_param.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_field_or_param.getEnd()), (short) Symbol.getColumn(_symbol_field_or_param.getEnd()));
        return new Symbol(_node_); :}

  | param_list.param_list COMA.COMA field_or_param.field_or_param {: ASTNode _node_ = param_list.add(field_or_param);
        _node_.setStart(Symbol.getLine(_symbol_param_list.getStart()), (short) Symbol.getColumn(_symbol_param_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_field_or_param.getEnd()), (short) Symbol.getColumn(_symbol_field_or_param.getEnd()));
        return new Symbol(_node_); :}

  | {: return new Symbol(new List()); :}
  ;
field_or_assignment_list =
    field_or_assignment.field_or_assignment {: ASTNode _node_ = new List().add(field_or_assignment);
        _node_.setStart(Symbol.getLine(_symbol_field_or_assignment.getStart()), (short) Symbol.getColumn(_symbol_field_or_assignment.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_field_or_assignment.getEnd()), (short) Symbol.getColumn(_symbol_field_or_assignment.getEnd()));
        return new Symbol(_node_); :}

  | field_or_assignment_list.field_or_assignment_list field_or_assignment.field_or_assignment {: ASTNode _node_ = field_or_assignment_list.add(field_or_assignment);
        _node_.setStart(Symbol.getLine(_symbol_field_or_assignment_list.getStart()), (short) Symbol.getColumn(_symbol_field_or_assignment_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_field_or_assignment.getEnd()), (short) Symbol.getColumn(_symbol_field_or_assignment.getEnd()));
        return new Symbol(_node_); :}

  | {: return new Symbol(new List()); :}
  ;
field_or_assignment =
    field_or_param.field_or_param SEMI.SEMI {: ASTNode _node_ = field_or_param;
        _node_.setStart(Symbol.getLine(_symbol_field_or_param.getStart()), (short) Symbol.getColumn(_symbol_field_or_param.getStart()));
        _node_.setEnd(Symbol.getLine(SEMI.getEnd()), (short) Symbol.getColumn(SEMI.getEnd()));
        return new Symbol(_node_); :}

  | assignment.assignment {: ASTNode _node_ = assignment;
        _node_.setStart(Symbol.getLine(_symbol_assignment.getStart()), (short) Symbol.getColumn(_symbol_assignment.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_assignment.getEnd()), (short) Symbol.getColumn(_symbol_assignment.getEnd()));
        return new Symbol(_node_); :}
  ;
field_declaration =
    PUBLIC.PUBLIC STATIC.STATIC field_or_param.field_or_param SEMI.SEMI {: ASTNode _node_ = field_or_param;
        _node_.setStart(Symbol.getLine(PUBLIC.getStart()), (short) Symbol.getColumn(PUBLIC.getStart()));
        _node_.setEnd(Symbol.getLine(SEMI.getEnd()), (short) Symbol.getColumn(SEMI.getEnd()));
        return new Symbol(_node_); :}
  ;
field_or_param =
    INT.INT IDENTIFIER.IDENTIFIER {: ASTNode _node_ = new FieldDeclaration(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(INT.getStart()), (short) Symbol.getColumn(INT.getStart()));
        _node_.setEnd(Symbol.getLine(IDENTIFIER.getEnd()), (short) Symbol.getColumn(IDENTIFIER.getEnd()));
        return new Symbol(_node_); :}
  ;
declaration_hook =
    LSQUARE.LSQUARE LSQUARE.LSQUARE_ IDENTIFIER.IDENTIFIER RSQUARE.RSQUARE RSQUARE.RSQUARE_ {: ASTNode _node_ = new DeclarationHook(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(LSQUARE.getStart()), (short) Symbol.getColumn(LSQUARE.getStart()));
        _node_.setEnd(Symbol.getLine(RSQUARE_.getEnd()), (short) Symbol.getColumn(RSQUARE_.getEnd()));
        return new Symbol(_node_); :}
  ;
assignment =
    reference.lhand EQUAL.EQUAL reference.rhand SEMI.SEMI {: ASTNode _node_ = new VariableAssignment(lhand, rhand);
        _node_.setStart(Symbol.getLine(_symbol_lhand.getStart()), (short) Symbol.getColumn(_symbol_lhand.getStart()));
        _node_.setEnd(Symbol.getLine(SEMI.getEnd()), (short) Symbol.getColumn(SEMI.getEnd()));
        return new Symbol(_node_); :}
  ;
reference =
    IDENTIFIER.IDENTIFIER {: ASTNode _node_ = new Reference(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(IDENTIFIER.getStart()), (short) Symbol.getColumn(IDENTIFIER.getStart()));
        _node_.setEnd(Symbol.getLine(IDENTIFIER.getEnd()), (short) Symbol.getColumn(IDENTIFIER.getEnd()));
        return new Symbol(_node_); :}
  ;













