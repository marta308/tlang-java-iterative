%header {:
 // this code is inlined before the generated parser
 package syntax;
 import AST.*;
:};

%embed {:
 // this code is inlined in the generated parser class
:};

%goal goal;

// Productions with semantic actions building the JastAdd AST

outer_class_decl goal =
  PUBLIC CLASS IDENTIFIER LBRACE declaration_list RBRACE  {: return new ClassDeclaration(IDENTIFIER, declaration_list); :}
  ;

List declaration_list =
    declaration                  {: return new List().add(declaration); :}
  | declaration_list declaration {: return declaration_list.add(declaration); :}
  | 							{: return new List(); :}
  ;

Declaration declaration =
	  inner_class_declaration	{: return inner_class_declaration; :}
	| method_declaration	{: return method_declaration; :}
	| field_declaration	{: return field_declaration; :}
	| declaration_hook	{: return declaration_hook; :}
	;

ClassDeclaration inner_class_declaration =
	PUBLIC STATIC CLASS IDENTIFIER LBRACE declaration_list RBRACE  {: return new ClassDeclaration(IDENTIFIER, declaration_list); :}
	;

MethodDeclaration method_declaration = 
	PUBLIC STATIC VOID IDENTIFIER LPAREN param_list.params RPAREN LBRACE field_or_assignment_list.locals RBRACE  {: return new MethodDeclaration(IDENTIFIER, params, locals); :}
	;

List param_list =
    field_or_param                  {: return new List().add(field_or_param); :}
  | param_list COMA field_or_param {: return param_list.add(field_or_param); :}
  | 							{: return new List(); :}
  ;
	
List field_or_assignment_list =
	  field_or_assignment {: return new List().add(field_or_assignment); :}
	| field_or_assignment_list field_or_assignment {: return field_or_assignment_list.add(field_or_assignment); :}
	|					{: return new List(); :}
	;
field_or_assignment =
	  field_declaration  {: return field_declaration; :}
	| assignment		 {: return assignment; :}
	;

field_declaration = 
	PUBLIC STATIC field_or_param SEMI      {: return field_or_param; :}
	;
FieldDeclaration field_or_param =
	INT IDENTIFIER		{: return new FieldDeclaration(IDENTIFIER); :}
	;
DeclarationHook declaration_hook = 
	LSQUARE LSQUARE IDENTIFIER RSQUARE RSQUARE	{: return new DeclarationHook(IDENTIFIER); :}
	;
VariableAssignment assignment =
	reference.lhand EQUAL reference.rhand SEMI	{: return new VariableAssignment(lhand, rhand); :}
	;
Reference reference = 
	IDENTIFIER		{: return new Reference(IDENTIFIER); :}
	;
	
