%header {: // Generated from spec/TLangParser.parser
// this code is inlined before the generated parser
 package AST; :};
%embed {: // Generated from spec/TLangParser.parser
// this code is inlined in the generated parser class :};
%terminals CLASS;
%terminals IDENTIFIER;
%terminals LBRACE;
%terminals RBRACE;
%terminals LPAREN;
%terminals RPAREN;
%terminals SEMI;
%terminals LSQUARE;
%terminals RSQUARE;
%typeof declaration = "Declaration";
%typeof declaration_list = "List";
%typeof goal = "compilationunit";
%goal goal;
goal =
    declaration_list.declaration_list {: ASTNode _node_ = new CompilationUnit(declaration_list);
        _node_.setStart(Symbol.getLine(_symbol_declaration_list.getStart()), (short) Symbol.getColumn(_symbol_declaration_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration_list.getEnd()), (short) Symbol.getColumn(_symbol_declaration_list.getEnd()));
        return new Symbol(_node_); :}
  ;
declaration_list =
    declaration.declaration {: ASTNode _node_ = new List().add(declaration);
        _node_.setStart(Symbol.getLine(_symbol_declaration.getStart()), (short) Symbol.getColumn(_symbol_declaration.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration.getEnd()), (short) Symbol.getColumn(_symbol_declaration.getEnd()));
        return new Symbol(_node_); :}

  | declaration_list.declaration_list declaration.declaration {: ASTNode _node_ = declaration_list.add(declaration);
        _node_.setStart(Symbol.getLine(_symbol_declaration_list.getStart()), (short) Symbol.getColumn(_symbol_declaration_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_declaration.getEnd()), (short) Symbol.getColumn(_symbol_declaration.getEnd()));
        return new Symbol(_node_); :}

  | {: return new Symbol(new List()); :}
  ;
declaration =
    CLASS.CLASS IDENTIFIER.IDENTIFIER LBRACE.LBRACE declaration_list.declaration_list RBRACE.RBRACE {: ASTNode _node_ = new ClassDeclaration(((String)IDENTIFIER.value), declaration_list);
        _node_.setStart(Symbol.getLine(CLASS.getStart()), (short) Symbol.getColumn(CLASS.getStart()));
        _node_.setEnd(Symbol.getLine(RBRACE.getEnd()), (short) Symbol.getColumn(RBRACE.getEnd()));
        return new Symbol(_node_); :}

  | IDENTIFIER.IDENTIFIER LPAREN.LPAREN declaration_list.params RPAREN.RPAREN LBRACE.LBRACE declaration_list.locals RBRACE.RBRACE {: ASTNode _node_ = new MethodDeclaration(((String)IDENTIFIER.value), params, locals);
        _node_.setStart(Symbol.getLine(IDENTIFIER.getStart()), (short) Symbol.getColumn(IDENTIFIER.getStart()));
        _node_.setEnd(Symbol.getLine(RBRACE.getEnd()), (short) Symbol.getColumn(RBRACE.getEnd()));
        return new Symbol(_node_); :}

  | IDENTIFIER.IDENTIFIER SEMI.SEMI {: ASTNode _node_ = new FieldDeclaration(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(IDENTIFIER.getStart()), (short) Symbol.getColumn(IDENTIFIER.getStart()));
        _node_.setEnd(Symbol.getLine(SEMI.getEnd()), (short) Symbol.getColumn(SEMI.getEnd()));
        return new Symbol(_node_); :}

  | LSQUARE.LSQUARE LSQUARE.LSQUARE_ IDENTIFIER.IDENTIFIER RSQUARE.RSQUARE RSQUARE.RSQUARE_ {: ASTNode _node_ = new DeclarationHook(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(LSQUARE.getStart()), (short) Symbol.getColumn(LSQUARE.getStart()));
        _node_.setEnd(Symbol.getLine(RSQUARE_.getEnd()), (short) Symbol.getColumn(RSQUARE_.getEnd()));
        return new Symbol(_node_); :}
  ;



