// Generated from spec/CompLangParser.parser
// this code is inlined before the generated parser
 package AST; 
import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "CompLangParser.beaver".
 */
public class CompLangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short BINDCOPY = 1;
		static public final short IDENTIFIER = 2;
		static public final short SEMI = 3;
		static public final short BINDEXHAUST = 4;

		static public final String[] NAMES = {
			"EOF",
			"BINDCOPY",
			"IDENTIFIER",
			"SEMI",
			"BINDEXHAUST"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oDZiiEmZ0C12TfGWEK0vMAW4E$jTzD7sQTzi0HM#FrMd9YOAGZsiUCPAkj51hfefoL2rb" +
		"riuq4geKJq7Bc8hsIvLjrePBaqu#BXml#kdjfe#ckS9keqGltsMTY40$XVpp5Ixn59#w#Os" +
		"QpxtZ$3qTatHfqiHFhhKxv0eq6BNW=");
 // Generated from spec/CompLangParser.parser
// this code is inlined in the generated parser class

	public CompLangParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // goal = composer_list.composer_list
			{
					final Symbol _symbol_composer_list = _symbols[offset + 1];
					final List composer_list = (List) _symbol_composer_list.value;
					 ASTNode _node_ = new CompositionProgram(composer_list);
        _node_.setStart(Symbol.getLine(_symbol_composer_list.getStart()), (short) Symbol.getColumn(_symbol_composer_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_composer_list.getEnd()), (short) Symbol.getColumn(_symbol_composer_list.getEnd()));
        return new Symbol(_node_);
			}
			case 1: // composer_list = composer.composer
			{
					final Symbol _symbol_composer = _symbols[offset + 1];
					final Composer composer = (Composer) _symbol_composer.value;
					 ASTNode _node_ = new List().add(composer);
        _node_.setStart(Symbol.getLine(_symbol_composer.getStart()), (short) Symbol.getColumn(_symbol_composer.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_composer.getEnd()), (short) Symbol.getColumn(_symbol_composer.getEnd()));
        return new Symbol(_node_);
			}
			case 2: // composer_list = composer_list.composer_list composer.composer
			{
					final Symbol _symbol_composer_list = _symbols[offset + 1];
					final List composer_list = (List) _symbol_composer_list.value;
					final Symbol _symbol_composer = _symbols[offset + 2];
					final Composer composer = (Composer) _symbol_composer.value;
					 ASTNode _node_ = composer_list.add(composer);
        _node_.setStart(Symbol.getLine(_symbol_composer_list.getStart()), (short) Symbol.getColumn(_symbol_composer_list.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_composer.getEnd()), (short) Symbol.getColumn(_symbol_composer.getEnd()));
        return new Symbol(_node_);
			}
			case 3: // composer = BINDCOPY.BINDCOPY IDENTIFIER.target IDENTIFIER.source SEMI.SEMI
			{
					final Symbol BINDCOPY = _symbols[offset + 1];
					final Symbol target = _symbols[offset + 2];
					final Symbol source = _symbols[offset + 3];
					final Symbol SEMI = _symbols[offset + 4];
					 ASTNode _node_ = new BindCopy (((String)target.value), ((String)source.value));
        _node_.setStart(Symbol.getLine(BINDCOPY.getStart()), (short) Symbol.getColumn(BINDCOPY.getStart()));
        _node_.setEnd(Symbol.getLine(SEMI.getEnd()), (short) Symbol.getColumn(SEMI.getEnd()));
        return new Symbol(_node_);
			}
			case 4: // composer = BINDEXHAUST.BINDEXHAUST IDENTIFIER.target IDENTIFIER.source SEMI.SEMI
			{
					final Symbol BINDEXHAUST = _symbols[offset + 1];
					final Symbol target = _symbols[offset + 2];
					final Symbol source = _symbols[offset + 3];
					final Symbol SEMI = _symbols[offset + 4];
					 ASTNode _node_ = new BindExhaust (((String)target.value), ((String)source.value));
        _node_.setStart(Symbol.getLine(BINDEXHAUST.getStart()), (short) Symbol.getColumn(BINDEXHAUST.getStart()));
        _node_.setEnd(Symbol.getLine(SEMI.getEnd()), (short) Symbol.getColumn(SEMI.getEnd()));
        return new Symbol(_node_);
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
