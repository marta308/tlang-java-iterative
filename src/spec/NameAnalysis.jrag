import java.util.regex.*;

aspect NameAnalysis {
	
	  syn String Declaration.qname() = null;
	  eq ClassDeclaration.qname() = 
	  	"" + ((parentName() != null)? parentName() + "." : "") + getName();
	  eq MethodDeclaration.qname() =
	  	"" + ((parentName() != null)? parentName() + "." : "") + getName();
	  eq FieldDeclaration.qname() =
	  	"" + ((parentName() != null)? parentName() + "." : "") + getName();
	  eq DeclarationHook.qname() =
	  	"" + ((parentName() != null)? parentName() + "." : "") + getName();
	  
	  inh String Declaration.parentName();
	  eq CompilationUnit.getClassDeclaration(int i).parentName() = null;
	  eq ClassDeclaration.getClassBody(int i).parentName() =
	  	"" + ((parentName() != null)? parentName() + "." : "") + getName();
	  eq MethodDeclaration.getParameters(int i).parentName() = 
	  	"" + ((parentName() != null)? parentName() + "." : "") + getName();
	  eq MethodDeclaration.getMethodBody(int i).parentName() = 
	  	"" + ((parentName() != null)? parentName() + "." : "") + getName();
	
	syn java.util.List<Declaration> Root.lookup(String declName){
  		java.util.List<Declaration> match = new java.util.LinkedList<Declaration>();
  		for(CompilationUnit cu : getCompilationUnitsList()){
  			match.addAll(cu.lookup(declName));
  		}
  		return match;
  	}	
  
  /*syn java.util.List<Declaration> CompilationUnit.lookup(String label) { 
  	String [] parts = label.split("\\.");
  	java.util.List<Declaration> resLocal = new java.util.LinkedList<Declaration>();
  	java.util.List<Declaration> res = new java.util.LinkedList<Declaration>();
  	for (Declaration d : getClassDeclarationList()){
  		if(parts[0].equals("*") || parts[0].equals(d.qname()))
  			resLocal.add(d);
    }
    if(parts.length == 1)
    	return resLocal;
  	for (int i = 1; i < parts.length; i++){
  		res = new java.util.LinkedList<Declaration>();
  		for(Declaration d : resLocal)
  			for(Declaration d1 : d.localLookup(parts[i]))  //just impl of addall
  				res.add(d1);
  		if(!res.isEmpty()){
  			resLocal = new java.util.LinkedList<Declaration>();
  			for(Declaration d : res)
  				resLocal.add(d);
  		}
  		else break; 		
  	}
  	return res;
  }*/
  
  syn java.util.List<Declaration> CompilationUnit.lookup(String label) { 
	  	String [] parts = label.split("\\.");
	  	java.util.List<Declaration> resLocal = new java.util.LinkedList<Declaration>();
	  	java.util.List<Declaration> res = new java.util.LinkedList<Declaration>();
	  	int limit = -2;
	  	int i = 1;
	  	for (Declaration d : getClassDeclarationList()){
	  		if(parts[0].equals("*") || parts[0].equals(d.qname()))
	  			resLocal.add(d);
	  		else if(parts[0].equals("**") || parts[0].matches("\\*[0-9]+")){
	  			i = 2;
	  			if(parts[0].matches("\\*[0-9]+"))
		  			limit = Integer.parseInt(parts[0].substring(1));
	  			
	  			if(parts[1].equals(d.qname()))
	  				resLocal.add(d);
	  			resLocal.addAll(d.localLookupDeep(parts[1], limit-1));
	  		}
	    }
	  	
	    if(parts.length == 1 || (parts[0].equals("**") || parts[0].matches("\\*[0-9]+")) && parts.length == 2)
	    	return resLocal;
	    
	  	for (; i < parts.length; i++){
	  		res = new java.util.LinkedList<Declaration>();
	  		for(Declaration d : resLocal)
	  			if(parts[i].equals("**") || parts[i].matches("\\*[0-9]+")){
	  				if(parts[i].matches("\\*[0-9]+"))
			  			limit = Integer.parseInt(parts[i].substring(1));
	  				else limit = -2;	  				
	  				res.addAll(d.localLookupDeep(parts[++i], limit));
	  			}
	  			else
	  				res.addAll(d.localLookup(parts[i]));
	  		if(!res.isEmpty()){
	  			resLocal = new java.util.LinkedList<Declaration>();
	  			for(Declaration d : res)
	  				resLocal.add(d);
	  		}
	  		else break; 		
	  	}
	  	return res;
  }
  
  syn java.util.List<Declaration> Declaration.localLookupDeep(String label, int limit) = new java.util.LinkedList<Declaration>();
  
  eq ClassDeclaration.localLookupDeep(String label, int limit) {
  	java.util.List<Declaration> res = new java.util.LinkedList<Declaration>();
  	if(limit != -1){
  		for(Declaration d : getClassBodyList()){
  			if(label.equals(d.getName()))
  				res.add(d);
  			res.addAll(d.localLookupDeep(label, limit-1));
  		}
  	}
  	return res;
  }
  
   eq MethodDeclaration.localLookupDeep(String label, int limit){
   	java.util.List<Declaration> res = new java.util.LinkedList<Declaration>();
   	if(limit != -1){
   		for(Declaration d : getParametersList()){
   			if(label.equals(d.getName()))
   				res.add(d);
   		}
   		for(Declaration d : getMethodBodyList()){
   			if(label.equals(d.getName()))
   				res.add(d);
   		}
   	}
  	return res;
  }
   
   syn java.util.List<Declaration> Declaration.localLookup(String label) = new java.util.LinkedList<Declaration>();
   
   eq ClassDeclaration.localLookup(String label) {
   	java.util.List<Declaration> res = new java.util.LinkedList<Declaration>();
   	for(Declaration d : getClassBodyList()){
   		if(label.equals("*") || label.equals(d.getName()))
   			res.add(d);
   	}
   	return res;
   }
   
    eq MethodDeclaration.localLookup(String label){
    	java.util.List<Declaration> res = new java.util.LinkedList<Declaration>();
   	for(Declaration d : getParametersList()){
   		if(label.equals("*") || label.equals(d.getName()))
   			res.add(d);
   	}
   	for(Declaration d : getMethodBodyList()){
   		if(label.equals("*") || label.equals(d.getName()))
   			res.add(d);
   	}	
   	return res;
   }
   
   //wildcards-not-supported-local lookup
   syn Declaration ASTNode.lookupNOWC(String label){
	   if(this instanceof CompilationUnit)
		   return ((CompilationUnit)this).lookupNOWC(label);
	   else if(this instanceof ClassDeclaration)
		   return ((ClassDeclaration)this).lookupNOWC(label);
	   else if(this instanceof MethodDeclaration)
		   return ((MethodDeclaration)this).lookupNOWC(label);
	   else return null;
   }
   
   syn Declaration CompilationUnit.lookupNOWC(String label){
	   for (Declaration d : getClassDeclarationList()){
		   if(label.equals(d.qname()))
			   return d;
	   }
	   return null;
   }
   
   syn Declaration ClassDeclaration.lookupNOWC(String label){
	   for(Declaration d : getClassBodyList()){
		   if(label.equals(d.qname()))
			   return d;
	   }
	   return null;
   }
   
   syn Declaration MethodDeclaration.lookupNOWC(String label){
	   for(Declaration d : getParametersList()){
		   if(label.equals(d.qname()))
			   return d;
	   }
	   for(Declaration d : getMethodBodyList()){
		   if(label.equals(d.qname()))
			   return d;
	   }
	   return null;
   }
   
      
  
}
