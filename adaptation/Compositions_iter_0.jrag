import java.util.regex.*;

aspect Compositions{
	
	inh CompilationUnit CompositionProgram.getCompilationUnit();
	eq CompilationUnit.getCompositionProgram().getCompilationUnit() = this;
	inh CompilationUnit Composer.getCompilationUnit();
	eq CompositionProgram.getComposers(int i).getCompilationUnit() = getCompilationUnit();
	
	syn String Composer.sourceName(){
		String name = getSourceName();
		String[] parts = name.split("\\.");
		StringBuffer newname = new StringBuffer();
		for(int i = 0; i<parts.length; i++){
			if(parts[i].equals("**"))
				newname.append("-1");
			else if(parts[i].matches("\\*[0-9]+"))
				newname.append(parts[i].substring(1));
			else newname.append(parts[i]);
			if(i != parts.length - 1)
				newname.append(".");
		}
		return newname.toString();
	}
	
	syn String Composer.targetName(){
		String name = getTargetName();
		String[] parts = name.split("\\.");
		StringBuffer newname = new StringBuffer();
		for(int i = 0; i<parts.length; i++){
			if(parts[i].equals("**"))
				newname.append("-1");
			else if(parts[i].matches("\\*[0-9]+"))
				newname.append(parts[i].substring(1));
			else newname.append(parts[i]);
			if(i != parts.length - 1)
				newname.append(".");
		}
		return newname.toString();
	}
	
	syn Declaration Composer.getSource(){
		return getCompilationUnit().lookup(sourceName());
	}
	
	syn Declaration Composer.getTarget(){
		return getCompilationUnit().lookup(targetName());
	}
	
	syn boolean Composer.isExhausted(){
		return getTarget() == null;
	}
	
	syn Composer CompositionProgram.nextComposition(){
		Composer next = null;
		for (int i = 0; i < getNumComposers(); i++){
			next = getComposers(i);
			if(!next.isExhausted())
				return next;
		}
		return null;
	}
	
	//this == bind target
	public boolean ASTNode.bind(ASTNode source){
		if(source == null)
			return false;
		ASTNode parent = this.getParent();
		int index = parent.getIndexOfChild(this);
		parent.removeChild(index);
		ASTNode nodeCopy = source.fullCopy();
		parent.insertChild(nodeCopy, index);
	
		return true;
	}
	
	public void ASTNode.removeSource(){
		ASTNode srcParent = this.getParent();		
		srcParent.removeChild(srcParent.getIndexOfChild(this));
	}
	
	public void CompilationUnit.doCompositions() throws CompositionException{
		Composer nextComposition = getCompositionProgram().nextComposition();
		while(nextComposition != null){
			Declaration source = nextComposition.getSource();
			Declaration target = nextComposition.getTarget();
			if(source == null)
				throw new CompositionException("Incorrect composition source fragment."); 
			target.bind(source);
			if(nextComposition instanceof BindExhaust){
				source.removeSource();
			}
			nextComposition = getCompositionProgram().nextComposition();
		}
	}
		
}