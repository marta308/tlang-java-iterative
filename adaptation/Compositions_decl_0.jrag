
aspect Compositions{
		
	inh CompilationUnit CompositionProgram.getCompilationUnit();
	eq CompilationUnit.getCompositionProgram().getCompilationUnit() = this;
	inh CompilationUnit BindComposer.getCompilationUnit();
	eq CompositionProgram.getComposers(int i).getCompilationUnit() = getCompilationUnit();
	

	inh CompositionProgram Declaration.getCompositionProgram();
	eq CompilationUnit.getBody(int i).getCompositionProgram() = getCompositionProgram();
	eq ClassDeclaration.getBody(int i).getCompositionProgram() = getCompositionProgram();
	eq MethodDeclaration.getBody(int i).getCompositionProgram() = getCompositionProgram();
	eq MethodDeclaration.getParameters(int i).getCompositionProgram() = getCompositionProgram();
	
	syn CompositionProgram List.getCompositionProgram(){
		if(getParent() instanceof Declaration)
			return ((Declaration)getParent()).getCompositionProgram();
		else if(getParent() instanceof CompilationUnit)
			return ((CompilationUnit)getParent()).getCompositionProgram();
		else return null;
	}

	
	syn Declaration BindComposer.getSource(){
		if(getSourceName().equals(""))
			return null;
		return getCompilationUnit().lookup(sourceName());
	}
	
	syn Declaration BindComposer.getTarget(){
		if(getTargetName().equals(""))
			return null;
		return getCompilationUnit().lookup(targetName());
	}
	
	syn boolean BindComposer.isExhausted(){
		return getTarget() == null;
	}
	
	syn BindComposer CompositionProgram.nextComposition(){
		BindComposer next = null;
		for (int i = 0; i < getNumComposers(); i++){
			next = getComposers(i);
			if(!next.isExhausted())
				return next;
		}
		//return null;
		return new BindComposer("", "");	//"null" composer
	}
	
	
	syn BindComposer Declaration.LookUpComposer(Declaration target){
		BindComposer composer = null;
		for(int i=0; i<getCompositionProgram().getNumComposers(); i++){
			composer = getCompositionProgram().getComposers(i);
			if(composer.getTarget() == target)
				return composer;
		}
		return null;	
	}
	
	
	rewrite DeclarationHook {
		when(//getCompositionProgram().nextComposition() != null &&
				getCompositionProgram().nextComposition().getTarget() == this
				//&& getCompositionProgram().getRoot().checkWellformedness()
				)
		to Declaration{
			BindComposer composer = LookUpComposer(this);
			Declaration source = composer.getSource();
			if(source == null)
				throw new CompositionException("Incorrect composition source fragment."); 
			return (Declaration)source.fullCopy();
		}
	}
	
	
	public void CompilationUnit.traverse(){
		for(ClassDeclaration cu : getBodyList()){
			cu.traverse();
		}
	}
	public void ASTNode.traverse() {
		for(int i=0;i<this.getNumChildNoTransform();i++){
			//getChild(i) triggers the rewrite in JastAdd
			ASTNode next = this.getChild(i);
				if(next!=null)
				next.traverse();
		}
	}
 
}